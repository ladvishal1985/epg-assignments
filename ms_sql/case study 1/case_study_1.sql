use case_study_1

select * from Product;
select * from Location;
select * from fact;

-- 1. Display the number of states present in the LocationTable
	SELECT State, COUNT(*) AS state_count FROM dbo.Location GROUP BY State;
	SELECT COUNT(DISTINCT state) AS total_states FROM dbo.Location;

	

-- 2. How many products are of regular type?
	SELECT  COUNT(*) AS regular_product_count FROM dbo.PRODUCT WHERE Type = 'Regular';

	select * from fact

-- 3. How much spending has been done on marketing of product ID 1?

	SELECT SUM(Marketing) AS total_marketing_for_product_1 FROM fact WHERE productId = 1;

-- 4.What is the minimum sales of a product?
	select min(Sales) from fact;

-- 5. Display the max Cost of Good Sold (COGS).

	SELECT MAX(COGS) FROM fact;

-- 6. Display the details of the product where product type is coffee.

	Select * from product where product_type = 'coffee'
 
 -- 7. Display the details where total expenses are greater than 40.
	SELECT * FROM fact WHERE Total_expenses > 40;

-- 8. What is the average sales in area code 719?
	SELECT  AVG(Sales) AS average_sales FROM fact WHERE area_code=719;

-- 9. Find out the total profit generated by Colorado state
	Select sum(profit) as profit from fact F Join location l on f.area_code = l.area_code where l.state = 'Colorado';

-- 10. Display the average inventory for each product ID.
	SELECT productId, AVG(inventory) AS average_inventory
		FROM fact GROUP BY productId ORDER BY ProductId ASC;

-- 11. Display state in a sequential order in a Location Table.
	SELECT State, Area_code from Location ORDER BY State ASC;


-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.
	SELECT productId, AVG(Budget_Margin) AS average_budget_margin
		FROM fact GROUP BY productId HAVING AVG(Budget_Margin) > 100;

-- 13. What is the total sales done on date 2010-01-01?

	SELECT SUM(Sales) AS total_sales FROM dbo.fact WHERE Date = '2010-01-01';

-- 14. Display the average total expense of each product ID on an individual date

	SELECT productId, Date, AVG(Total_expenses) AS average_total_expenses
		FROM fact GROUP BY productId, Date ORDER BY productId ASC;

-- 15. Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.
	SELECT f.Date, f.productId, p.product_type, p.product, f.sales, f.profit, l.state, l.area_code
		FROM fact f 
			JOIN product p ON f.productId = p.productId
			JOIN Location l ON  f.area_code = l.area_code;

-- 16. Display the rank without any gap to show the sales wise rank
   SELECT Date, productId, Sales, 
       ROW_NUMBER() OVER (ORDER BY Sales DESC) AS sales_rank FROM fact;

-- 17. Find the state wise profit and sales.
   SELECT l.State,
       SUM(f.Sales) AS total_sales, 
       SUM(f.profit) AS total_profit
		FROM fact f
	  JOIN Location l ON f.area_code = l.area_code GROUP BY l.state;

-- 18. Find the state wise profit and sales along with the product name.
	
	SELECT l.State, p.Product,
       SUM(f.Sales) AS total_sales, 
       SUM(f.profit) AS total_profit
		FROM fact f
	  JOIN Location l ON f.area_code = l.area_code 
	  JOIN Product p ON f.productId = p.productId 
	  GROUP BY l.state, p.Product;
    
-- 19.If there is an increase in sales of 5%, calculate the increasedsales.
   SELECT productId, Sales, 
       Sales * 1.05 AS sales_with_5_percent_increase FROM fact;

-- 20. Find the maximum profit along with the product ID and producttype
	
	SELECT TOP 1 f.productId, p.product_type, f.profit
		FROM fact f
			JOIN product p ON f.productId = p.productId
			ORDER BY f.profit DESC;

-- 21.Create a stored procedure to fetch the result according to the product type from Product Table.
	CREATE PROCEDURE GetProductsByType
		@ProductType NVARCHAR(50)
	AS
	BEGIN
		SELECT productId, Product, Type
		FROM product
		WHERE Type = @ProductType;
	END;

	EXEC GetProductsByType 'Espresso';

-- 22.Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss

	SELECT 
			ProductId,
			Date,
			Total_Expenses,
			CASE
				WHEN Total_Expenses < 60 THEN 'Profit'
				ELSE 'Loss'
			END AS Profit_or_Loss
		FROM 
			Fact;

-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order
	SELECT 
		DATEPART(WEEK, Date) AS Week,
		Date,
		ProductId,
		SUM(Sales) AS Total_Sales
		FROM 
    Fact
	GROUP BY 
    DATEPART(WEEK, Date), Date, ProductId
	ORDER BY 
    DATEPART(WEEK, Date), Date, ProductId;

	SELECT 
		DATEPART(WEEK, Date) AS Week,
		SUM(Sales) AS Total_Sales
		FROM Fact
		GROUP BY ROLLUP (DATEPART(WEEK, Date)) ORDER BY DATEPART(WEEK, Date);

-- 24. Apply union and intersection operator on the tables which consist of attribute area code.
   SELECT Area_Code FROM Fact 
	UNION
	SELECT Area_Code FROM Fact;

	SELECT Area_Code FROM Fact 
	INTERSECT
	SELECT Area_Code FROM Fact;

-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
	CREATE FUNCTION dbo.GetProductByType (@ProductType NVARCHAR(50))
		RETURNS TABLE
		AS
		RETURN
		(
			SELECT 
				ProductId,
				Product_Type,
				Product,
				Type
			FROM 
				Product
			WHERE 
				Product_Type = @ProductType
		);
	SELECT *  FROM dbo.GetProductByType('Tea');

-- Change the product type from coffee to tea where product ID is 1 and undo it.
	BEGIN TRANSACTION;

	-- Step 1: Change the product type from 'Coffee' to 'Tea'
	UPDATE Product
	SET Product_Type = 'Tea'
	WHERE ProductId = 1;

	-- Verify the change
	SELECT * FROM Product WHERE ProductId = 1;

	-- Step 2: Undo the change (rollback)
	ROLLBACK;

	-- Verify the rollback
	SELECT * FROM Product WHERE ProductId = 1;

-- 27. Display the date, product ID and sales where total expenses are between 100 to 200
	SELECT 
		Date,
		ProductId,
		Sales
	FROM 
		Fact
	WHERE 
		Total_Expenses BETWEEN 100 AND 200;

-- 28. Delete the records in the Product Table for regular type

	DELETE FROM Product WHERE Type = 'Regular';

-- 29.Display the ASCII value of the fifth character from the column Product.
	SELECT  ProductId, Product, ASCII(SUBSTRING(Product, 5, 1)) AS Fifth_Char_ASCII FROM  Product;